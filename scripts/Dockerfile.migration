# Stage 1: Build Stage
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Install necessary build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files and tsconfig
COPY package*.json tsconfig.json ./

# Copy scripts and data
COPY scripts ./scripts
COPY .db ./.db

# Install dependencies
RUN npm install
RUN npm install --save-dev @types/mongoose

# Set environment variables
ENV NODE_ENV=development

# Build application (if required)
RUN npx tsc

# Stage 2: Production Stage (Distroless)
FROM gcr.io/distroless/nodejs18 AS runner

# Set working directory
WORKDIR /app

# Copy necessary files from builder stage
COPY --from=builder /app ./

# Set environment variables
ENV NODE_ENV=production

# Use a predefined non-root user (UID 1000)
USER 1000

# Command to run migration
CMD ["node", "scripts/migrate-data.js"]








# # Use Node.js 18 Alpine as base
# FROM node:18-alpine

# # Set working directory
# WORKDIR /app

# # Install necessary build dependencies
# RUN apk add --no-cache python3 make g++

# # Copy package files and tsconfig
# COPY package*.json tsconfig.json ./

# # Copy scripts and data
# COPY scripts ./scripts
# COPY .db ./.db

# # Install dependencies
# RUN npm install
# RUN npm install --save-dev @types/mongoose

# # Set environment variables
# ENV NODE_ENV=development

# # Command to run migration
# CMD ["npx", "ts-node", "--project", "scripts/tsconfig.json", "scripts/migrate-data.ts"]
