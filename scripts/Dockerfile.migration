# Use Node.js 18 Alpine as base
FROM node:18-alpine

# Set working directory
WORKDIR /app

# Install necessary build dependencies
RUN apk add --no-cache python3 make g++

# Copy package.json, package-lock.json, and tsconfig.json first for better caching
COPY package*.json tsconfig.json ./

# Install dependencies (including ts-node & typescript for ts execution)
RUN npm install && npm install --save-dev ts-node typescript @types/mongoose

# Copy scripts and data after dependencies (to leverage Docker layer caching)
COPY scripts ./scripts
COPY .db ./.db

# Set environment variables
ENV NODE_ENV=development

# Run migration script using ts-node (no need to specify tsconfig if it's at root)
CMD ["npx", "ts-node", "scripts/migrate-data.ts"]



# # Use Node.js 18 Alpine as base
# FROM node:18-alpine

# # Set working directory
# WORKDIR /app

# # Install necessary build dependencies
# RUN apk add --no-cache python3 make g++

# # Copy package files and tsconfig
# COPY package*.json tsconfig.json ./

# # Copy scripts and data
# COPY scripts ./scripts
# COPY .db ./.db

# # Install dependencies
# RUN npm install
# RUN npm install --save-dev @types/mongoose

# # Set environment variables
# ENV NODE_ENV=development

# # Command to run migration
# CMD ["npx", "ts-node", "--project", "scripts/tsconfig.json", "scripts/migrate-data.ts"]


# # Stage 1: Build Stage
# FROM node:18-alpine AS builder

# # Set working directory
# WORKDIR /app

# # Install necessary build dependencies
# RUN apk add --no-cache python3 make g++

# # Copy package files and tsconfig
# COPY package*.json tsconfig.json ./

# # Copy scripts and data
# COPY scripts ./scripts
# COPY .db ./.db

# # Install dependencies
# RUN npm install
# RUN npm install --save-dev @types/mongoose

# # Set environment variables
# ENV NODE_ENV=development

# # Build application (if required)
# RUN npx tsc

# # Stage 2: Production Stage (Distroless)
# FROM gcr.io/distroless/nodejs18 AS runner

# # Set working directory
# WORKDIR /app

# # Copy necessary files from builder stage
# COPY --from=builder /app ./
# COPY --from=builder /app/node_modules ./node_modules

# # Set environment variables
# ENV NODE_ENV=production

# # Use a predefined non-root user (UID 1000)
# USER 1000

# # Command to run migration
# CMD ["npx", "ts-node", "--project", "scripts/tsconfig.json", "scripts/migrate-data.ts"]








# # # Use Node.js 18 Alpine as base
# # FROM node:18-alpine

# # # Set working directory
# # WORKDIR /app

# # # Install necessary build dependencies
# # RUN apk add --no-cache python3 make g++

# # # Copy package files and tsconfig
# # COPY package*.json tsconfig.json ./

# # # Copy scripts and data
# # COPY scripts ./scripts
# # COPY .db ./.db

# # # Install dependencies
# # RUN npm install
# # RUN npm install --save-dev @types/mongoose

# # # Set environment variables
# # ENV NODE_ENV=development

# # # Command to run migration
# # CMD ["npx", "ts-node", "--project", "scripts/tsconfig.json", "scripts/migrate-data.ts"]
